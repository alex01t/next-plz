worker_processes 4;
pcre_jit on;
error_log  /usr/local/openresty/nginx/logs/error.log notice;
events {
    worker_connections  1024;
}
http {
    lua_shared_dict peers 1m;
    init_by_lua_block {
      local peers = ngx.shared.peers

      -- Domain names do not make sense. See https://github.com/openresty/lua-resty-core/blob/master/lib/ngx/balancer.md#set_current_peer
      local peers_table = {
        "127.0.0.11:8001",
        "127.0.0.12:8002",
        "127.0.0.13:8003",  -- it is safe to remove one and reload
      }

      peers:set("number_of_peers", 0) -- refill peers list every reload
      for k,v in pairs(peers_table) do
        peers:set(k, v)
        peers:incr("number_of_peers", 1)
        ngx.log(ngx.NOTICE, "*** set peer "..k.." as "..v.." total = "..peers:get("number_of_peers"))
      end

      if not peers:get("counter") then -- reload does not reset the counter
          peers:set("counter", 0)
          ngx.log(ngx.NOTICE, "*** set counter to 0 ***")
      end
      ngx.log(ngx.NOTICE, '*** all set ***')
    }
    upstream backend {
        server 0.0.0.1;   # just an invalid address as a place holder
        balancer_by_lua_block {
            local peers = ngx.shared.peers

            local number_of_peers = peers:get("number_of_peers")
            ngx.log(ngx.NOTICE, "*** number_of_peers is "..number_of_peers)

            local counter = peers:get("counter")
            ngx.log(ngx.NOTICE, "*** counter is "..counter)

            local peer_number = math.fmod(counter, number_of_peers) + 1
            ngx.log(ngx.NOTICE, "*** math.fmod("..counter..", "..number_of_peers..") + 1 = "..peer_number)
            ngx.log(ngx.NOTICE, "*** peer_number is "..peer_number)

            local peer = peers:get(peer_number)
            ngx.log(ngx.NOTICE, "*** peer is "..peer)

            local ngx_re = require "ngx.re"
            local res, err = ngx_re.split(peer, ":")
            if not res or res[2] == nil then
                ngx.log(ngx.ERR, "failed to parse peer "..peer..", err=", err)
                return ngx.exit(500)
            end
            local host = res[1]
            local port = res[2]
            ngx.log(ngx.NOTICE, "*** host / port is "..host.." / "..port)

            local balancer = require "ngx.balancer"
            local ok, err = balancer.set_current_peer(host, port)
            if not ok then
                ngx.log(ngx.ERR, "failed to set the current peer: ", err)
                return ngx.exit(500)
            end
        }
        keepalive 10;
    }
    server {
        listen 80;
        location /next {
            content_by_lua_block {
                local peers = ngx.shared.peers
                peers:incr("counter", 1)
                local c = peers:get("counter")
                ngx.say("changed counter to " .. c)
            }
        }
        location /get {
            content_by_lua_block {
                local peers = ngx.shared.peers
                local number_of_peers = peers:get("number_of_peers")
                local counter = peers:get("counter")
                local peer_number = math.fmod(counter, number_of_peers) + 1
                for i = 1,number_of_peers  do
                    local peer = peers:get(i)
                    ngx.say(peer .. ((peer_number == i) and  " <==" or "" ))
                end
                ngx.say("number_of_peers is "..peers:get("number_of_peers")..", counter is "..peers:get("counter"))
            }
        }
        location / {
            proxy_pass http://backend;
        }
    }
    server {
         listen 127.0.0.11:8001;
         location / {
             content_by_lua_block {
                 ngx.say("i am first peer")
             }
         }
    }
    server {
         listen 127.0.0.12:8002;
         location / {
             content_by_lua_block {
                 ngx.say("i am second peer")
             }
         }
    }
    server {
         listen 127.0.0.13:8003;
         location / {
             content_by_lua_block {
                 ngx.say("i am third peer")
             }
         }
    }
    log_format stripped_with_req_id escape=json '{ '
        '"request": "$request", '
        '"status": "$status", '
        '"request_time": "$request_time", '
        '"pid": "$pid" '
    '}';
    access_log /usr/local/openresty/nginx/logs/access.log stripped_with_req_id;
    default_type  application/octet-stream;
    client_body_temp_path /var/run/openresty/nginx-client-body;
    proxy_temp_path       /var/run/openresty/nginx-proxy;
    fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
    uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
    scgi_temp_path        /var/run/openresty/nginx-scgi;
    sendfile        on;
    keepalive_timeout  165;
}